@page "/live"
@using System.Net.WebSockets
@using Microsoft.AspNetCore.SignalR.Client;
@using Microsoft.EntityFrameworkCore;
@using OrderFlow.Data.Tables
@using OrderFlow.Util
@using System.Text
@using System
@using OrderFlow.Data
@inject NavigationManager navigation
@inject DatabaseDbContext ctx
@inject IHttpClientFactory httpClientBuilder
@implements IDisposable

<h2 class="text-lg">Livemonitor</h2>

<p>Connection Status: @socket.State</p>

<button @onclick="RefreshOrders">Get</button>

<table>
    <thead></thead>
    <tbody>
        @foreach (var i in orders)
        {
            <tr>
                <td>@i.Id - @i.Name</td>
            </tr>
        }
    </tbody>
</table>

@code {
    ClientWebSocket socket = new ClientWebSocket();
    CancellationTokenSource cancelToken = new CancellationTokenSource();
    List<Consumable> orders = new();
    HttpClient httpClient = null!;
    HubConnection hubConnection = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // Initialize vars
        httpClient = httpClientBuilder.CreateClient();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigation.ToAbsoluteUri("api/live/ws"))
            .Build();

        // End init

        hubConnection.On("ReceiveMessage", async () =>
        {
            orders = await GetOrders();
        });

        await hubConnection.StartAsync();

        OrderFlow.Backend.LiveMonitor.Notifier += new EventHandler(async (o, e) =>
        {
            orders = await GetOrders();
        });

        //string wsEndpoint = "ws" + navigation.BaseUri.TrimStart("https");

        //await socket.ConnectAsync(new Uri($"{wsEndpoint}api/live/ws"), cancelToken.Token);
    }

    public async Task OrderListener(ClientWebSocket ws)
    {
        ArraySegment<Byte> buffer = new ArraySegment<byte>(new Byte[1]);

        while (true)
        {
            await ws.ReceiveAsync(buffer, CancellationToken.None);

            orders = await GetOrders();
        }
    }

    public async Task<List<Consumable>> GetOrders()
    {
        //return await ctx.Consumables.Select(c => c).ToListAsync();
        var result = await httpClient.GetAsync(navigation.BaseUri + "api/orders");
        var orders = await result.Content.ReadFromJsonAsync<List<Consumable>>();

        return orders;
    }

    // Button event
    public async Task RefreshOrders()
    {
        //orders = await GetOrders();
        await hubConnection.InvokeAsync("SendMessage");
    }

    public void Dispose()
    {
        cancelToken.Dispose();
        //_ = socket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Bye", CancellationToken.None);
    }
}
