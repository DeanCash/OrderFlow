// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderFlow.Data;

#nullable disable

namespace OrderFlow.Migrations
{
    [DbContext(typeof(DatabaseDbContext))]
    partial class DatabaseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("OrderFlow.Data.Tables.Consumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Consumables");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Fresh and juicy apple",
                            ImagePath = "apple.png",
                            Name = "Apple",
                            Price = 1.1m,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Description = "Delicious cheesy pizza",
                            ImagePath = "pizza.png",
                            Name = "Pizza",
                            Price = 5.15m,
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Description = "Classic sandwich with ham and cheese",
                            ImagePath = "sandwich.png",
                            Name = "Sandwich",
                            Price = 4.3m,
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            Description = "Buttery and flaky croissant",
                            ImagePath = "croissant.png",
                            Name = "Croissant",
                            Price = 2m,
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            Description = "Classic pasta with marinara sauce",
                            ImagePath = "pasta.png",
                            Name = "Pasta",
                            Price = 9.3m,
                            Type = 0
                        },
                        new
                        {
                            Id = 6,
                            Description = "Juicy beef burger with cheese",
                            ImagePath = "burger.png",
                            Name = "Burger",
                            Price = 4.4m,
                            Type = 0
                        },
                        new
                        {
                            Id = 7,
                            Description = "Refreshing orange juice",
                            ImagePath = "orange-juice.jpg",
                            Name = "Orange Juice",
                            Price = 2m,
                            Type = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "Carbonated cola drink",
                            ImagePath = "cola.png",
                            Name = "Cola",
                            Price = 1.4m,
                            Type = 1
                        },
                        new
                        {
                            Id = 9,
                            Description = "Refreshing iced tea",
                            ImagePath = "icedtea.png",
                            Name = "Iced Tea",
                            Price = 2m,
                            Type = 1
                        },
                        new
                        {
                            Id = 10,
                            Description = "Homemade lemonade",
                            ImagePath = "lemonade.png",
                            Name = "Lemonade",
                            Price = 3m,
                            Type = 1
                        },
                        new
                        {
                            Id = 11,
                            Description = "Rich and aromatic coffee",
                            ImagePath = "coffee.jpg",
                            Name = "Coffee",
                            Price = 3.1m,
                            Type = 1
                        },
                        new
                        {
                            Id = 12,
                            Description = "Creamy milkshake",
                            ImagePath = "milkshake.png",
                            Name = "Milkshake",
                            Price = 4m,
                            Type = 1
                        });
                });

            modelBuilder.Entity("OrderFlow.Data.Tables.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("OrderedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OrderFlow.Data.Tables.OrderedConsumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ConsumableId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ConsumableId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderedConsumables");
                });

            modelBuilder.Entity("OrderFlow.Data.Tables.QR_Code", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("QR_Codes");
                });

            modelBuilder.Entity("OrderFlow.Data.Tables.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("TableCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("OrderFlow.Data.Tables.Order", b =>
                {
                    b.HasOne("OrderFlow.Data.Tables.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("OrderFlow.Data.Tables.OrderedConsumable", b =>
                {
                    b.HasOne("OrderFlow.Data.Tables.Consumable", "Consumable")
                        .WithMany("OrderedConsumables")
                        .HasForeignKey("ConsumableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderFlow.Data.Tables.Order", "Order")
                        .WithMany("OrderedConsumables")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumable");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrderFlow.Data.Tables.QR_Code", b =>
                {
                    b.HasOne("OrderFlow.Data.Tables.Table", "Table")
                        .WithOne("QRCode")
                        .HasForeignKey("OrderFlow.Data.Tables.QR_Code", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("OrderFlow.Data.Tables.Consumable", b =>
                {
                    b.Navigation("OrderedConsumables");
                });

            modelBuilder.Entity("OrderFlow.Data.Tables.Order", b =>
                {
                    b.Navigation("OrderedConsumables");
                });

            modelBuilder.Entity("OrderFlow.Data.Tables.Table", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("QRCode")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
